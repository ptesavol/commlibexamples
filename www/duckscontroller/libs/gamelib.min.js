"use strict";function CallbackNode(){this.id=-1,this.object=null,this.method=null,this.previousNode=null,this.nextNode=null}function CallbackBuffer(a){var b=this,c=null,d=null,e=10,f=0,g=null;a&&a>e&&(e=a),d=new CallbackNode,c=d;for(var h=d,i=null,j=0;e-1>j;j++)i=new CallbackNode,i.previousNode=h,h.nextNode=i,j==e-2&&(i.nextNode=d,d.previousNode=i),h=i;b.pushBack=function(a,b,d){c.id=a,c.object=b,c.method=d,f++,f==e&&k(),c=c.nextNode},b.callMethodAndPop=function(a,b,e){for(i=d;i.id!=a;)if(i=i.nextNode,i==d)throw{error:"CallbackBuffer::callMethodAndPop(). Callback not found"};console.log("Calling callback with id "+a+" and result "+e),i.method.call(i.object,b,e,a),i!=d?(i.id=-1,i.previousNode.nextNode=i.nextNode,i.nextNode.previousNode=i.previousNode,i.nextNode=c.nextNode,i.previousNode=c,c.nextNode=i):(d.id=-1,d=d.nextNode),f--},b.size=function(){return f};var k=function(){g=c.nextNode,h=c,i=null;for(var a=0;e>a;a++)i=new CallbackNode,i.previousNode=h,h.nextNode=i,a==e-1&&(i.nextNode=g,g.previousNode=i),h=i;e=2*e};b.toString=function(){var a="";for(i=d,a+=i.id+",",i=i.nextNode;i!=d;)a+=i.id+",",i=i.nextNode;return a}}function RpcCommunicator(){var a=this,b=1,c=new Object,d=null,e=null,f=null,g=new CallbackBuffer,h=new Object,i=0,j=null;a.exposeRpcMethod=function(a,b,d){try{c[a]={object:b,method:d}}catch(e){console.log(e)}},a.setConnectionListener=function(a,b){d={object:a,listener:b}},a.setDisconnectionListener=function(a,b){e={object:a,listener:b}},a.setBinaryListener=function(a){f=a},a.connectionExists=function(a){return"undefined"!=typeof a&&h.hasOwnProperty(a)?!0:!("undefined"!=typeof a||!h.hasOwnProperty(j))},a.getConnection=function(a){return h[a]},a.callRpc=function(c,d,e,f,h){if(a.connectionExists(h))try{"function"==typeof f?(g.pushBack(b,e,f),console.log("RpcCommunicator::callRpc() pushed back callback"),"undefined"!=typeof h?k({jsonrpc:"2.0",method:c,params:d,id:""+b},h):k({jsonrpc:"2.0",method:c,params:d,id:""+b},j),console.log("RpcCommunicator::callRpc() sendMessage returned"),b++):"undefined"!=typeof h?k({jsonrpc:"2.0",method:c,params:d},h):k({jsonrpc:"2.0",method:c,params:d},j)}catch(i){console.log(i)}},a.notifyAll=function(a,b){try{for(var c in h)console.log("RpcCommunicator::notifyAll() sending message to "+c),k({jsonrpc:"2.0",method:a,params:b,id:null},c);console.log("RpcCommunicator::notifyAll() sending messages completed")}catch(d){console.log(d)}},a.getBufferedAmount=function(a){return h[a].getBufferedAmount()},a.sendBinary=function(a,b){try{h[b].sendBinary(a)}catch(c){console.log(c)}};var k=function(a,b){try{h[b].send(JSON.stringify(a))}catch(c){console.log(c)}};a.sendMessage=k;var l=function(a,b,c,d){try{if(a){k({jsonrpc:"2.0",error:a,id:c});var e="undefined"!=typeof a.code?a.code:"",f="undefined"!=typeof a.path?a.path:"",g="undefined"!=typeof a.message?a.message:"";console.log("Exception in executing a RPC method: "+e+" EngineIoCommunicator::onMessage() >> "+f+" "+g)}else k({jsonrpc:"2.0",result:b,id:c},d)}catch(h){console.log(h)}},m=function(a,b){try{if(!a.jsonrpc||"2.0"!=a.jsonrpc||!a.method)return void k({jsonrpc:"2.0",error:{code:-32600,message:"Invalid JSON-RPC."},id:null},b);if("[object Array]"!==Object.prototype.toString.call(a.params))return void k({jsonrpc:"2.0",error:{code:-32602,message:"Parameters must be sent inside an array."},id:a.id},b);if(!c.hasOwnProperty(a.method))return null!=a.id?void k({jsonrpc:"2.0",error:{code:-32601,message:"Method "+a.method+" not found."},id:a.id},b):void k({jsonrpc:"2.0",error:{code:-32601,message:"Method "+a.method+" not found."},id:null},b);var d=c[a.method];"undefined"==typeof a.params&&(a.params=new Array),null!=a.id?(a.params.push(b),a.params.push(function(c,d){l(c,d,a.id,b)}),d.method.apply(d.object,a.params)):(a.params.push(b),a.params.push(function(a,b){}),d.method.apply(d.object,a.params))}catch(e){console.log(e)}},n=function(a){console.log(a);try{var b=null,c=null;"undefined"!=typeof a.error&&(b=a.error),"undefined"!=typeof a.result&&(c=a.result),a.id?g.callMethodAndPop(a.id,b,c):console.log("RpcCommunicator::handleReturnValue() error: "+JSON.stringify(b))}catch(d){console.log(d)}},o=function(a,b){try{a.method?m(a,b):n(a)}catch(c){console.log(c)}},p=function(){i++;for(var a=i;;)if(a=Math.floor(4294967296*Math.random()),!h.hasOwnProperty(a))break;return a};a.setupPipe=function(a,b){console.log("RpcCommunicator::setupPipe() between: "+a+" and "+b),h.hasOwnProperty(a)&&h.hasOwnProperty(b)&&(h[a].setPipedTo(b),h[b].setPipedTo(a))},a.onMessage=function(a,b){console.log("RpcCommunicator::onMessage() "+a),console.log(typeof a);try{var c=b.getPipedTo();if(null!=c)return console.log("RPCCommunicator::onMessage() relaying a piped message"),void h[c].send(a);if(a instanceof ArrayBuffer)return void(f&&f.onBinary(a,b.getId()));var d;try{d=JSON.parse(a)}catch(e){return void k({jsonrpc:"2.0",error:{code:-32700,message:"Invalid JSON."},id:null},b.getId())}o(d,b.getId())}catch(g){console.log(g)}},a.addConnection=function(b){try{return console.log("RpcCommunicator::addConnection, connectionid was "+b.getId()),b.getId()||b.setId(p()),h[b.getId()]=b,b.setListener(a),d&&d.listener.call(d.object,b.getId()),j=b.getId(),b.getId()}catch(c){console.log(c)}},a.onDisconnected=function(b){try{a.closeConnection(b),e&&e.listener.call(e.object,b)}catch(c){console.log(c)}},a.closeConnection=function(a){try{a in h&&(h[a].close(),delete h[a])}catch(b){console.log(b)}}}function WebSocketConnection(){var a=this,b=null,c=null,d=null,e=null,f=null,g=null,h=null;a.connect=function(c,d){c.protocol=c.isSsl?"wss":"ws";try{var e=c.protocol+"://"+c.host+":"+c.port+"/json-rpc";c.id&&(e+="?id="+c.id),b=new WebSocket(e,"json-rpc"),b.binaryType="arraybuffer",b.onopen=function(){d(null)},b.onmessage=j,b.onclose=function(b,c){k(b,c,a)}}catch(f){console.log(f)}},a.setSocket=function(c){console.log("WebSocketConnection::setSocket()");try{b=c,b.on("message",i),b.on("close",function(b,c){k(b,c,a)})}catch(d){console.log(d)}},a.setId=function(a){c=a},a.setPipedTo=function(a){h=a},a.getPipedTo=function(){return h},a.setRemoteAddress=function(a){d=a},a.setRemotePort=function(a){e=a},a.setOrigin=function(a){f=a},a.setListener=function(a){g=a},a.getId=function(){return c},a.getRemoteAddress=function(){return d},a.getRemotePort=function(){return e},a.getOrigin=function(){return f};var i=function(b){console.log("WebSocketConnection::onMessage() "+JSON.stringify(b));try{g&&("utf8"==b.type&&g.onMessage(b.utf8Data,a),"binary"==b.type&&g.onMessage(b.binaryData,a))}catch(c){console.log(c)}},j=function(b){console.log("WebSocketConnection::onMessageEvent() "+JSON.stringify(b.data));try{g&&g.onMessage(b.data,a)}catch(c){console.log(c)}},k=function(a,b,c){try{g&&g.onDisconnected(c.getId())}catch(d){console.log(d)}};a.send=function(a){try{b.send(a)}catch(c){console.log(c)}},a.sendBinary=a.send,a.close=function(){try{b.close()}catch(a){console.log(a)}}}function WebSocketRpcConnection(){var a=this,b=new WebSocketConnection,c=new RpcCommunicator;a.callRpc=function(a,b,d,e){return c.callRpc(a,b,d,e)},a.connect=function(a,d){console.log("WebSocketRpcConnection::connect()"),b.connect(a,function(){console.log("WebsocketRpcConnection Connected"),c.addConnection(b),console.log("WebsocketRpcConnection added to communicator"),d(null,null)})},a.close=function(){},a.getCommunicator=function(){return c}}function WebRtcClient(a,b){var c=this,d=new WebSocketConnection,e=new RpcCommunicator,f=new Object,g=null;c.setConnectionListener=function(a){g=a},c.onIceCandidate=function(a,b){console.log("iceCandidate got, sending it to the other client"),e.callRpc("offerIce",[a,b])};var h=function(a){f[a]=new WebRtcConnection(b),f[a].setPartnerId(a),f[a].setIceListener(c),f[a].setStreamListener(c),f[a].setConnectionListener(c),f[a].setDataChannelListener(c)};c.shutdown=function(a){console.log("WebRtcClient::onbeforeunload");for(var b in f)f.hasOwnProperty(b)&&(f[b].close(),delete f[b])},c.handleRtcOffer=function(a,b,c){console.log("WebRtcClient::handleRtcOffer() descriptor: "+a),f.hasOwnProperty(b)||h(b),f[b].onConnectionOfferReceived(a,c,function(a){console.log("WebRtcClient::handleRtcOffer() onConnectionOfferReceived returned"),e.callRpc("acceptConnectionOffer",[a,b])})},c.handleRtcAnswer=function(a,b,c){console.log("WebRtcClient::handleRtcAnswer()"),f[b].onConnectionAnswerReceived(a)},c.handleIceCandidate=function(a,b,c){console.log("WebRtcClient::handleIceCandidate()"),f.hasOwnProperty(b)||h(b),f[b].onIceCandidateReceived(a)};var i=function(b){console.log("WebRtcClient::connectToCoordinator()"),console.log("Websocket connecting to the coordinator"),d.connect(a,function(){console.log("Websocket Connected to the Coordinator"),console.log("Creating RPCCommunicator for the Websocket"),e.addConnection(d),b()})};c.onDisconnected=function(a){if(console.log("WebRtcClient::onDisconnected() "),f.hasOwnProperty(a)){var b=f[a];g.onDisconnected(b.getId()),b.close(),delete f[a]}},c.onDataChannelOpen=function(a){console.log("WebRtcClient::onDataChannelOpen() "),g.addConnection(a)},c.onStream=function(a,b){console.log("WebRtcClient::onStream()")},c.onRemoveStream=function(a,b){console.log("WebRtcClient::onRemoveStream()"),c.onDisconnected(b)};var j=function(a,b){console.log("WebRtcClient::connectToPeers()"),console.log("Announcing to the Coordinator"),e.callRpc("announce",[a],c,c.onPeerIdsArrived)};c.onPeerIdsArrived=function(a,b,c){console.log("WebRtcClient::onPeerIdsArrived(), data.length: "+b.length);for(var d=0,g=0;g<b.length;g++)d=b[g],h(d),console.log("Trying to create offer to client id "+d),f[d].createConnectionOffer(function(a,b){console.log("Offer created, sending it to the other client "+b),e.callRpc("offerConnection",[a,b])});0===b.length&&console.log("Announce returned 0 client ids, not connecting")},c.run=function(a,b){console.log("WebRtcClient::run()"),window.onbeforeunload=c.shutdown,e.exposeRpcMethod("handleRtcOffer",c,c.handleRtcOffer),e.exposeRpcMethod("handleRtcAnswer",c,c.handleRtcAnswer),e.exposeRpcMethod("handleIceCandidate",c,c.handleIceCandidate),i(function(){console.log("WebRtcClient::run() connected to the coordinator"),j(a,function(){console.log("WebRtcClient::run() connectToPeers returned")}),b&&b(e)})}}function WebRtcConnection(a){var b=this,c=null,d=null,e=null,f=null,g=null,h=null,i=null,j=null,k={optional:[{DtlsSrtpKeyAgreement:!0}]},l=new RTCPeerConnection(a,k),m=null;l.ondatachannel=function(a){var c=a.channel||a;console.log("ondatachannel "+a),m=c,m.binaryType="arraybuffer",m.onopen=b.onDataChannelOpen,m.onmessage=b.onMessage};var n=function(a){console.info("signaling state change:",a)},o=function(a){console.info("ice connection state change:",a),!h||"disconnected"!=l.iceConnectionState&&"closed"!=l.iceConnectionState||h.onDisconnected(d)},p=function(a){console.info("ice gathering state change:",a)},q=function(a){console.log("WebRtcConnection::onIceCanditate() partnerId: "+d+" event: "+a),console.log("iceListener oli "+e),null==a.candidate?console.log("All Ice candidates listed"):e.onIceCandidate(a.candidate,d)};l.onsignalingstatechange=n,l.oniceconnectionstatechange=o,l.onicegatheringstatechange=p,l.onicecandidate=q,b.close=function(){console.log("WebRtcConnection::close"),m.close(),"closed"!=l.signalingState&&l.close()},b.send=function(a){try{"open"==m.readyState&&m.send(a)}catch(b){console.log(b)}},b.getBufferedAmount=function(){return m.bufferedAmount},b.sendBinary=function(a){try{"open"==m.readyState&&m.send(a)}catch(b){console.log(b)}},b.onDataChannelClosed=function(a){console.log("WebRtcConnection::onDataChannelClosed "+a),h.onDisconnected(b)},b.onDataChannelOpen=function(a){console.log("WebRtcConnection::onDataChannelOpen "+a),m.binaryType="arraybuffer",m.onclose=b.onDataChannelClosed,m.onmessage=b.onMessage,g&&g.onDataChannelOpen(b)},b.onMessage=function(a){try{j&&j.onMessage(a.data,b)}catch(c){console.log(c)}},b.setId=function(a){c=a},b.getId=function(){return c},b.getPartnerId=function(){return d},b.setPartnerId=function(a){d=a},b.setDataChannelListener=function(a){g=a},b.setListener=function(a){j=a},b.setIceListener=function(a){e=a,console.log("WebRtcConnection::setIceListener()"+a)},b.setStreamListener=function(a){f=a,l.onaddstream=function(a){b.onStream(a)},l.onremovestream=function(a){b.onRemoveStream(a)}},b.setConnectionListener=function(a){h=a},b.onStream=function(a){console.log("WebRtcConnection::onStream"+a),f.onStream(a.stream,d)},b.onRemoveStream=function(a){console.log("WebRtcConnection::onStream"+a),f.onRemoveStream(a.stream,d)},b.addStream=function(a){i=a,l.addStream(a)},b.createConnectionOffer=function(a){var c=null;m=l.createDataChannel("jsonrpcchannel",{reliable:!0}),m.binaryType="arraybuffer",m.onopen=b.onDataChannelOpen,m.onmessage=b.onMessage,l.createOffer(function(b){console.log("peerConnection::createOffer called its callback: "+b),c=b,l.setLocalDescription(b,function(){a(l.localDescription,d)},function(a){console.log("WebRtcConnection::createConnectionOffer() setLocalDescription error")},{})},function(a){console.log(a)})},b.onConnectionAnswerReceived=function(a){console.log("WebRtcConnection::onConnectionAnswerReceived(), descriptor: "+a),l.setRemoteDescription(new RTCSessionDescription(a),function(){console.log("WebRtcConnection::onConnectionAnswerReceived() setRemoteDescription returned OK")},function(a){console.log("WebRtcConnection::onConnectionAnswerReceived() setRemoteDescription returned error "+a)})},b.onConnectionOfferReceived=function(a,b,c){console.log("WebRtcConnection::onConnectionOfferReceived"),console.log("WebRtcConnection::onConnectionOfferReceived trying to set remote description");var d=new RTCSessionDescription(a);l.setRemoteDescription(d,function(){console.log("WebRtcConnection::onConnectionOfferReceived remote description set"),l.createAnswer(function(a){l.setLocalDescription(a,function(){c(l.localDescription)},function(a){console.log(a)})},function(a){console.log(a)})},function(a){console.log("WebRtcConnection::onConnectionOfferReceived setting remote description failed "+a)})},b.onIceCandidateReceived=function(a){l.addIceCandidate(new RTCIceCandidate(a),function(){console.log("WebRtcConnection::onIceCandidateReceived adding Ice candidate succeeded")},function(a){console.log("WebRtcConnection::onIceCandidateReceived adding Ice candidate failed "+a)})}}function getGetParameter(a){var b=null,c=[];return location.search.substr(1).split("&").forEach(function(d){c=d.split("="),c[0]===a&&(b=decodeURIComponent(c[1]))}),b}function GameClient(){var a=this,b="http://spaceify.net/games/",c=null,d=new CommunicationClient;d.setClientListener(a),d.setConnectionTypeListener(a);var e=null,f=null,g=null,h=null,i=null;a.connect=function(a,b,e,f,g){d.connect(a,b,e,f,function(a){c=a,g()})},a.connectAsScreen=function(c,d,e,f){var g=b+c+"/connectiondetails",h=new XMLHttpRequest;console.log("Trying to make a xmlhttprequest to "+g),h.onreadystatechange=function(){if(4==h.readyState&&200==h.status){console.log("Received from xhmlhttprequest: "+h.responseText);var b=JSON.parse(h.responseText);d.innerHTML=b.controllerUrl,e.src=b.qrCodeUrl,a.connect(b.hubHost,b.hubPort,"screen",b.groupId,f)}},h.open("GET",g,!0),h.send()},a.connectAsController=function(b){var c=getGetParameter("id"),d=getGetParameter("host"),e=getGetParameter("port");a.connect(d,e,"controller",c,b)},a.notifyScreens=function(a,b){console.log("GameClient::notifyScreens(), screens were: "+JSON.stringify(c));var c=d.getClientsByType("screen");for(var e in c)d.notifyClient(e,a,b)},a.callClientRpc=function(a,b,c,e,f){d.callClientRpc(a,b,c,obj,f)},a.notifyController=function(a,b,c){console.log("GameClient::notifyController(), id: "+a),d.notifyClient(a,b,c)},a.exposeRpcMethod=function(a,b,c){d.exposeRpcMethod(a,b,c)},a.onClientConnected=function(a,b,c){console.log("GameClient::onClientConnected() "+a.getClientId()+" "+a.getClientType()),"screen"==a.getClientType()&&(g&&g.listener.call(g.object,a.getClientId()),d.upgradeConnectionToWebRtc(a.getClientId())),"controller"==a.getClientType()&&e&&e.listener.call(e.object,a.getClientId())},a.onClientDisconnected=function(a,b,c){console.log("GameClient::onClientDisconnected() '"+a.getClientId()+"'"),"screen"==a.getClientType()&&h&&h.listener.call(h.object,a.getClientId()),"controller"==a.getClientType()&&f&&f.listener.call(f.object,a.getClientId())},a.onConnectionTypeUpdated=function(a,b){console.log("GameClient::onConnectionTypeUpdated() clientType: "+a.getClientType()),null!=i&&"screen"==a.getClientType()&&i.listener.call(i.object,b,a.getClientId())},a.setControllerConnectionListener=function(a,b){e={object:a,listener:b}},a.setControllerDisconnectionListener=function(a,b){f={object:a,listener:b}},a.setScreenConnectionListener=function(a,b){g={object:a,listener:b}},a.setScreenDisconnectionListener=function(a,b){h={object:a,listener:b}},a.setScreenConnectionTypeListener=function(a,b){i={object:a,listener:b}}}function Client(a,b){var c=this,d=a,e=b,f=!1,g=!1,h=null,i=new Array;c.setClientId=function(a){d=a},c.setClientType=function(a){e=a},c.setWebRtc=function(a){f=a},c.setPreferredConnectionId=function(a){h=a},c.getClientId=function(){return d},c.getClientType=function(){return e},c.isWebRtc=function(){return f},c.getPreferredConnectionId=function(){return h},c.isLocalHub=function(){},c.addPipeId=function(a){i.push(a)},c.getBinaryConnectionId=function(){return pipeId},c.getConnectionType=function(){return f?"WebRtc":g?"Local Hub":"Cloud"}}function ab2str(a){return String.fromCharCode.apply(null,new Uint16Array(a))}function CommunicationClient(){var a=this,b=null,c=null,d=null,e=(new Object,null),f=null,g=null,h=null,i=null,j=new RpcCommunicator,k=new WebSocketConnection,l=new Object,m=new Object,n=new Object,o=null;a.addRtcConnection=function(a){console.log("CommunicationClient::addRtcConnection()"),j.addConnection(a),l.hasOwnProperty(a.getId())&&l[a.getId()].setWebRtc(!0),g&&g.onConnectionTypeUpdated(l[a.getId()],l[a.getId()].getConnectionType())},a.onRtcDisconnected=function(a){console.log("CommunicationClient::onRtcDisconnected()"),j.onDisconnected(a)},a.onBinary=function(a,b){console.log("CommunicationClient::onBinary()"),h&&h.onBinary(a,n[b])},a.upgradeConnectionToWebRtc=function(a){console.log("CommunicationClient::upgradeConnectionToWebRtc() + peerId: "+a),l[a].isWebRtc()||o.connectToPeer(a)},a.createPipe=function(c,d){console.log("CommunicationClient::createPipe() + peerId: "+c);var f,g=new WebSocketConnection;g.connect(b,function(){console.log("Pipe connected to the websocket server"),f=j.addConnection(g),j.callRpc("constructPipe",[c,e],a,function(){console.log("CommunicationClient::createPipe() pipe construction ready"),l.hasOwnProperty(c)&&(l[c].addPipeId(f),n[f]=c),d(f)},f)})},a.requestPipe=function(c,d,e,f){console.log("CommunicationClient::requestPipe()");var g=new WebSocketConnection,h=null;g.connect(b,function(){console.log("Pipe connected to the websocket server"),h=j.addConnection(g),j.callRpc("registerAsPipe",[c],a,function(a,b){console.log("registerAsPipe returned"),l.hasOwnProperty(d)&&(l[d].addPipeId(h),n[h]=d),f(null,"Ok")},h)})},a.setClientListener=function(a){f=a},a.setConnectionTypeListener=function(a){g=a},a.setBinaryListener=function(a){h=a};var p=function(a,b){var c=null;return l.hasOwnProperty(a)?c=l[a]:(c=new Client(a,b),l[a]=c),m.hasOwnProperty(b)||(m[b]=new Object),m[b][a]=c,c},q=function(a){delete m[l[clientData.clientId].getClientType()][clientData.clientId],delete l[clientData.clientId]},r=function(b){console.log("CommunicationClient::updateConnectedClients()");var c=i;b&&(c=b),j.callRpc("getConnectedClients",[d],a,function(a,d){console.log("CommunicationClient::getConnectedClientsFromHub() got answer from hub: "+JSON.stringify(d));var g=null;for(var h in d)g=p(d[h].clientId,d[h].clientType),b&&(g.setLocalHub(!0),g.setPreferredConnection(c)),!b&&f&&g.getClientId()!=e&&f.onClientConnected(g)},c)},s=function(a){if(console.log("CommunicationCLient::connectToLocalHubs()"),null!=a){var b=null,c=null,d=null;for(var f in a){b=a[f].port;for(var g=0;g<a[f].localIps.length;g++){c=a[f].localIps[g];var h={host:c,port:b,id:e},i=null;d=new WebSocketConnection,d.connect(h,function(){console.log("Connected to local hub at ip: "+c+" port: "+b),i=j.addConnection(d),r(i)})}}}},t=function(){console.log("Getting list of local hubs from the server"),j.callRpc("getLocalHubs",[],a,function(a,b){console.log("Following local hubs are available: "+JSON.stringify(b)),b&&s(b)},i)};a.sendBinaryToClient=function(a,b){console.log("CommunicationClient::sendBinaryToClient() clientId: "+a),j.sendBinary(b,a)},a.notifyClient=function(a,b,c){console.log("CommunicationClient::notifyClient() clientId: "+a+" method: "+b),l.hasOwnProperty(a)?l[a].isWebRtc()?(console.log("Notifying client through WebRtc"),c.push(e),j.callRpc(b,c,null,null,a)):l[a].isLocalHub()?(console.log("Notifying client through local hub"),j.callRpc("callClientRpc",[a,b,c],null,null,l[a].getPreferredConnection())):(console.log("Notifying client through the server"),j.callRpc("callClientRpc",[a,b,c],null,null,i)):(console.log("Making a RPC notification over pipe"),c.push(e),j.callRpc(b,c,null,null,a))},a.callClientRpc=function(a,b,c,d,f){console.log("CommunicationClient::callClientRpc() clientId: "+a+" method: "+b),l.hasOwnProperty(a)?l[a].isWebRtc()?(console.log("Notifying client through WebRtc"),c.push(e),j.callRpc(b,c,d,f,a)):l[a].isLocalHub()?(console.log("Notifying client through local hub"),j.callRpc("callClientRpc",[a,b,c],d,f,l[a].getPreferredConnection())):(console.log("Notifying client through the server"),j.callRpc("callClientRpc",[a,b,c],d,f,i)):(console.log("Making a RPC call over pipe"),c.push(e),j.callRpc(b,c,d,f,a))},a.exposeRpcMethod=function(a,b,c){j.exposeRpcMethod(a,b,c)},a.getClientsByType=function(a){return m[a]},a.connect=function(f,g,h,l,m){c=h,d=l,j.setBinaryListener(a),b={host:f,port:g,id:null},k.connect(b,function(){console.log("connected to the websocket server"),i=j.addConnection(k),j.callRpc("registerAsClient",[null,c,d],a,function(a,b){console.log("Server replied to registerAsClient call: '"+b+"'"),e=b,r(),t(),m(b)},i)})},a.onClientConnected=function(a,b,c){console.log("CommunicationClient::onClientConnected() '"+JSON.stringify(a)+"'");var d=p(a.clientId,a.clientType);f&&d.getClientId()!=e&&f.onClientConnected(d)},a.onClientDisconnected=function(a,b,c){console.log("CommunicationClient::onClientDisconnected() '"+JSON.stringify(a)+"'"),f&&a.clientId!=e&&(f.onClientDisconnected(l[a.clientId]),q(a.clientId))},a.onHubConnected=function(a,b,c){console.log("CommunicationClient::onHubConnected() '"+JSON.stringify(a)+"'")},a.onHubDisconnected=function(a,b,c){console.log("CommunicationClient::onHubDisconnected() '"+JSON.stringify(a)+"'")},j.exposeRpcMethod("onClientConnected",a,a.onClientConnected),j.exposeRpcMethod("onClientDisconnected",a,a.onClientDisconnected),j.exposeRpcMethod("onHubConnected",a,a.onHubConnected),j.exposeRpcMethod("onHubDisconnected",a,a.onHubDisconnected),j.exposeRpcMethod("requestPipe",a,a.requestPipe)}function WebRtcConnector(a,b,c){var d=this,e=new Object,f=null;d.setConnectionListener=function(a){f=a},d.onIceCandidate=function(c,e){console.log("iceCandidate got, sending it to the other client"),a.callRpc("callClientRpc",[e,"handleIceCandidate",[c]],d,null,b)};var g=function(a){e[a]=new WebRtcConnection(c),e[a].setPartnerId(a),e[a].setId(a),e[a].setIceListener(d),e[a].setStreamListener(d),e[a].setConnectionListener(d),e[a].setDataChannelListener(d)};d.shutdown=function(a){console.log("WebRtcConnector::onbeforeunload");for(var b in e)e.hasOwnProperty(b)&&(e[b].close(),delete e[b])},d.handleRtcOffer=function(c,f,h){console.log("WebRtcConnector::handleRtcOffer() descriptor: "+c),e.hasOwnProperty(f)||g(f),e[f].onConnectionOfferReceived(c,f,function(c){console.log("WebRtcConnector::handleRtcOffer() onConnectionOfferReceived returned"),console.log("Trying to call handleRtcAnswer on partner "+f),a.callRpc("callClientRpc",[f,"handleRtcAnswer",[c]],d,null,b),console.log("handleRtcAnswer call done on partner "+f)})},d.handleRtcAnswer=function(a,b,c){console.log("WebRtcConnector::handleRtcAnswer()"),e[b].onConnectionAnswerReceived(a)},d.handleIceCandidate=function(a,b,c){console.log("WebRtcConnector::handleIceCandidate()"),e.hasOwnProperty(b)||g(b),e[b].onIceCandidateReceived(a)},d.onDisconnected=function(a){if(console.log("WebRtcConnector::onDisconnected() "),e.hasOwnProperty(a)){var b=e[a];f.onRtcDisconnected(b.getId()),b.close(),delete e[a]}},d.onDataChannelOpen=function(a){console.log("WebRtcConnecter::onDataChannelOpen() "),f.addRtcConnection(a)},d.onStream=function(a,b){console.log("WebRtcConnector::onStream()")},d.onRemoveStream=function(a,b){console.log("WebRtcConnector::onRemoveStream()"),d.onDisconnected(b)},d.connectToPeer=function(c){console.log("WebRtcConnector::connectToPeer() partnerId: "+c),g(c),e[c].createConnectionOffer(function(e){console.log("Offer created, sending it to the other client "+c),a.callRpc("callClientRpc",[c,"handleRtcOffer",[e]],d,null,b)})},window.onbeforeunload=d.shutdown,a.exposeRpcMethod("handleRtcOffer",d,d.handleRtcOffer),a.exposeRpcMethod("handleRtcAnswer",d,d.handleRtcAnswer),a.exposeRpcMethod("handleIceCandidate",d,d.handleIceCandidate)}"undefined"!=typeof exports&&(module.exports=CallbackBuffer),"undefined"!=typeof exports&&(global.CallbackBuffer=require("./callbackbuffer")),"undefined"!=typeof exports&&(module.exports=RpcCommunicator),"undefined"!=typeof exports&&(global.WebSocket=require("websocket").w3cwebsocket,global.logger=require("winston")),"undefined"!=typeof exports&&(module.exports=WebSocketConnection),"undefined"!=typeof exports&&(global.RpcCommunicator=require("./rpccommunicator"),global.WebSocketConnection=require("./websocketconnection")),"undefined"!=typeof exports&&(module.exports=WebSocketRpcConnection),navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia;var RTCPeerConnection=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection,RTCSessionDescription=window.RTCSessionDescription||window.mozRTCSessionDescription||window.webkitRTCSessionDescription,RTCIceCandidate=window.RTCIceCandidate||window.mozRTCIceCandidate||window.webkitRTCIceCandidate;"undefined"!=typeof exports&&(module.exports=Client),"undefined"!=typeof exports&&(module.exports=CommunicationClient),"undefined"==typeof exports&&(navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia),"undefined"!=typeof exports&&(module.exports=WebRtcConnector);